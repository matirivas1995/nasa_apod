{"version":3,"sources":["components/UI/Picture.js","components/UI/Card.js","components/NasaComponents/NasaPicture.js","components/UI/WeatherDate.js","components/NasaComponents/NasaPreviousWeather.js","components/NasaComponents/NasaWeather.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Picture","props","src","pictureData","url","alt","title","className","Card","classes","children","apiKey","process","NasaPicture","useState","setPictureData","useEffect","a","fetch","res","json","data","fetchPhoto","date","explanation","WeatherDate","dateContent","dateArray","split","month","day","selectedMonth","NasaPreviousWeather","sol","terrestrial_date","max_temp","min_temp","onClick","setSelectedSol","NasaWeather","description","setDescription","currentWeather","setCurrentWeather","historicWeather","setHistoricWeather","descriptions","soles","length","i","prev","fetchWeather","onChangeSol","newSol","historicWeatherContent","map","weather","id","atmo_opacity","season","wind_speed","pressure","sol_desc_en","Home","App","Helmet","charSet","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91a1c38c.chunk.js","sourcesContent":["import './Picture.css'\n\nconst Picture = (props) => {\n    return (\n        <img\n            src={props.pictureData.url}\n            alt={props.pictureData.title}\n            className=\"pic\"\n        />\n    );\n}\n\nexport default Picture;","import './Card.css';\n\nconst Card = (props) => {\n    const classes = 'card ' + props.className;\n    return <div className={classes}>{props.children}</div>;\n}\n\nexport default Card;","import React, { useState, useEffect } from \"react\";\nimport Picture from \"../UI/Picture\";\nimport Card from \"../UI/Card\";\nimport './NasaPicture.css'\n\nconst apiKey = process.env.REACT_APP_APOD_KEY;\n\nconst NasaPicture = () => {\n    const [pictureData, setPictureData] = useState(null);\n\n    useEffect(() => {\n        fetchPhoto();\n\n        async function fetchPhoto() {\n            const res = await fetch(\n                `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\n            );\n            const data = await res.json();\n            setPictureData(data);\n        }\n\n    }, []);\n\n    if (!pictureData) return <div />;\n\n    return (\n            <Card className=\"nasa-picture\">\n                <h1>ASTRONOMY PICTURE OF THE DAY</h1>\n                <Picture pictureData={pictureData} />\n                <div>\n                    <h1>{pictureData.title}</h1>\n                    <p className=\"date\">{pictureData.date}</p>\n                    <p className=\"explanation\">{pictureData.explanation}</p>\n                </div>\n            </Card>\n    );\n}\n\nexport default NasaPicture;","import React from \"react\"\nimport './WeatherDate.css';\n\nconst WeatherDate = (props) => {\n    let dateContent = <p>No date</p>\n    if (props.date) {\n        const dateArray = props.date.split(\"-\");\n        const month = +dateArray[1];\n        const day = dateArray[2];\n        const months = [\"January \", \"February \", \"March \", \"April \", \"May \", \"June \",\n            \"July \", \"August \", \"September \", \"October \", \"November \", \"December \"];\n        const selectedMonth = months[month];\n        dateContent = (<div className=\"weather-date\">\n            <div className=\"weather-date__month\">{selectedMonth}</div>\n            <div className=\"weather-date__day\"> {day}</div>\n        </div>);\n    }\n    return <>{dateContent}</>;\n    \n}\n\nexport default WeatherDate;","import WeatherDate from '../UI/WeatherDate';\nimport './NasaPreviousWeather.css';\n\nconst NasaPreviousWeather = (props) => {\n    const sol = props.sol;\n    return (\n        <div className=\"previous-wrapper\">\n            <h3 className=\"previous-title\">\n                <span>Sol {sol.sol}</span>\n                <WeatherDate date={sol.terrestrial_date}/>\n            </h3>\n            <p className=\"previous-temp\">\n                    High:\n                <span>{sol.max_temp}</span>\n                <span> °C</span>\n                </p>\n                <p className=\"previous-temp\">\n                    Low:\n                <span>{sol.min_temp}</span>\n                <span> °C</span>\n            </p>\n            <div className=\"button-container\">\n                <button\n                        className=\"previous-day__more-info\"\n                        onClick={() => props.setSelectedSol(sol)}\n                    >\n                        More info\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default NasaPreviousWeather;","import React, { useState, useEffect } from \"react\";\nimport Card from \"../UI/Card\";\nimport WeatherDate from \"../UI/WeatherDate\";\nimport NasaPreviousWeather from \"./NasaPreviousWeather\";\nimport './NasaWeather.css'\n\n\nconst NasaWeather = () => {\n    const [description, setDescription] = useState(null);\n    const [currentWeather, setCurrentWeather] = useState(null);\n    const [historicWeather, setHistoricWeather] = useState([]);\n\n    useEffect(() => {\n        fetchWeather();\n\n        async function fetchWeather() {\n            const res = await fetch(\n                `https://mars.nasa.gov/rss/api/?feed=weather&category=msl&feedtype=json`\n            );\n            const data = await res.json();\n            setDescription(data.descriptions);\n            if (data.soles.length > 0) {\n                setCurrentWeather(data.soles[0]);\n                for (let i = 0; i < 5; i++) {\n                    setHistoricWeather(prev => {\n                        return [data.soles[i], ...prev]\n                    })\n                }\n            }\n        }\n    }, []);\n\n    const onChangeSol = (newSol) => {\n        setCurrentWeather(newSol);\n    }\n\n    let historicWeatherContent = <p>No Historic Weather Found</p>\n    if (historicWeather.length > 0) {\n        historicWeatherContent = historicWeather.map(weather => (\n            <NasaPreviousWeather\n                key={weather.id}\n                sol={weather}\n                setSelectedSol={onChangeSol} />\n        ));\n    }\n\n    return (\n        <Card className=\"nasa-weather\">\n            <div className=\"header\">\n                <h1>Weather at Gale Crater - MARS</h1>\n            </div>\n            <div className=\"wrap\">\n                {currentWeather ? (\n                    <>\n                        <div className=\"date\">\n                            <h2>Sol {currentWeather.sol}</h2>\n                            <WeatherDate date={currentWeather.terrestrial_date} />\n                            <span>{currentWeather.atmo_opacity}</span><br />\n                            <span>{currentWeather.season}</span>\n                        </div>\n                        <div className=\"extra-content\">\n                            <div className=\"temp\">\n                                <h2 className=\"section-title\">Temp</h2>\n                                <p className=\"reading\">\n                                    High:\n                                <span>{currentWeather.max_temp}</span>\n                                    <span> °C</span>\n                                </p>\n                                <p className=\"reading\">\n                                    Low:\n                                <span>{currentWeather.min_temp}</span>\n                                    <span> °C</span>\n                                </p>\n                            </div>\n                            <div className=\"temp\">\n                                <h2 className=\"section-title\">Extra</h2>\n                                <p className=\"reading\">\n                                    Wind:\n                                <span>{currentWeather.wind_speed}</span>\n                                    <span>{\"kph\"}</span>\n                                </p>\n                                <p className=\"reading\">\n                                    Pressure:\n                                <span>{currentWeather.pressure}</span>\n                                    <span>{\"Pa\"}</span>\n                                </p>\n                            </div>\n                        </div>\n                    </>\n                ) : (\n                    <h2>No data</h2>\n                )}\n            </div>\n            <div className=\"wrap-previous\">\n                {historicWeatherContent}\n            </div>\n            <p>*{description && description.sol_desc_en}</p>\n        </Card>\n    );\n}\n\nexport default NasaWeather;","import React from \"react\";\nimport NasaPicture from \"./NasaComponents/NasaPicture\";\nimport NasaWeather from \"./NasaComponents/NasaWeather\";\nimport './Home.css'\n\nconst Home = () => {\n    \n    return (\n        <div className=\"wrapper\">\n            <NasaWeather className=\"weather\"/>\n            <NasaPicture className=\"picture\"/>\n        </div>\n    );\n}\n\nexport default Home;","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Helmet } from \"react-helmet\";\nimport Home from \"./components/Home\";\n\nconst App = () => {\n  const title='NASA API'\n  return (\n    <div>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>{title}</title>]\n      </Helmet>\n      <BrowserRouter>\n        <div className=\"App-header\">\n          <Route component={Home} path=\"/\" />\n        </div>\n      </BrowserRouter>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}